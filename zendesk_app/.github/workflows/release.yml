name: Build and Release

on:
  push:
    branches: [main]
    paths:
      - 'zendesk_app/manifest.json'
      - 'zendesk_app/src/manifest.json'

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: zendesk_app

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: zendesk_app/package-lock.json

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./src/manifest.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Version ${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Install dependencies
        run: npm install

      - name: Install ZCLI
        run: npm i @zendesk/zcli -g

      # Build Preview Version
      - name: Build Preview Version
        run: |
          # Replace API URLs with preview URL
          sed -i 's|https://api.quivr.app|https://api-preview.quivr.app|g' src/app/services/quivr.ts
          sed -i 's|https://api.quivr.app|https://api-preview.quivr.app|g' src/app/App.tsx
          npm run build
          mkdir -p dist_preview
          cp -r dist/* dist_preview/
          zcli apps:package dist_preview --path "quivr-preview-v${{ steps.get_version.outputs.version }}.zip"

      # Build Production Version
      - name: Build Production Version
        run: |
          # Restore original API URLs
          sed -i 's|https://api-preview.quivr.app|https://api.quivr.app|g' src/app/services/quivr.ts
          sed -i 's|https://api-preview.quivr.app|https://api.quivr.app|g' src/app/App.tsx
          npm run build
          zcli apps:package dist --path "quivr-v${{ steps.get_version.outputs.version }}.zip"

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      # Upload Preview ZIP
      - name: Upload Preview ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./quivr-preview-v${{ steps.get_version.outputs.version }}.zip
          asset_name: quivr-preview-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      # Upload Production ZIP
      - name: Upload Production ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./quivr-v${{ steps.get_version.outputs.version }}.zip
          asset_name: quivr-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip 